image: "glregistry.boost.open.global/boost/docker/node-toolkit:16"

variables:
  DOCKER_BUILD_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
  DOCKER_BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  DOCKER_CLIENT_IMAGE: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  DOCKER_BACKEND_TAG_BRANCH: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_BRANCH
  DOCKER_CLIENT_TAG_BRANCH: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_BRANCH
  GIT_SSL_BACKEND: openssl
  HTTP_PROXY: ""
  HTTPS_PROXY: ""

include:
  - project: "boost/template-ci/pipelines/common"
    file: "securite/oss-index/oss-index-template.yml"
  - project: 'bots/trivy-script'
    file: 'trivy-template-job.yml'

stages:
  - quality  
  - docker
  - build
  - sast
  - test
  #- quality  
  - scan_docker
  - deploy

# Utilisation du cache pour accélérer les builds
cache:
  paths:
    - node_modules/
    - packages/courDeCassation/node_modules/
    - packages/generic/backend/node_modules/
    - packages/generic/client/node_modules/

before_script:
  - apt-get update -y && apt-get install git -y

# Build du projet
build:
  stage: build
  script:
    - yarn install
    - yarn compile
    - yarn build || true
  artifacts:
    paths:
      - node_modules/
      - packages/courDeCassation/node_modules/
      - packages/generic/backend/node_modules/
      - packages/generic/client/node_modules/
      - packages/generic/sso/node_modules/
  allow_failure: true

# Test phase
test_label:
  stage: test
  variables:
    RUN_MODE: "TEST"
  script:
    - yarn install
    - yarn compile
    - cd packages/generic/client/
    - yarn test:coverage
    - cd ../backend/
    - yarn test:coverage
  artifacts:
    paths:
      - packages/generic/backend/src/coverage/
      - packages/generic/client/src/coverage/
  allow_failure: true

sonar:
  stage: quality
  #image: glregistry.boost.open.global/boost/docker/gitlab-ant-sonar:latest
  image: sonarsource/sonar-scanner-cli:latest
  before_script:
    - LABEL_PROJECTS=("client" "backend")
    - yum install -y jq
    - jq
  script:
    - |

      # Loop through each project
      for PROJECT in "${LABEL_PROJECTS[@]}"; do

        echo "---Sonar creating project $PROJECT---"

        PROJECT_KEY=$SONAR_KEY$PROJECT-label

        # Create project if not exist
        RESPONSE=$(curl -s -u ${SONAR_TOKEN}: -X POST --form name=${PROJECT_KEY} "${SONAR_URL}/api/projects/create?project=${PROJECT_KEY}")
        echo $RESPONSE | grep -q 'already exists' || true

        PROJECT_COVERAGE_PATH=packages/generic/$PROJECT/src/coverage/lcov.info

        PACKAGE_JSON="packages/generic/$PROJECT/package.json"
        if [ -f "$PACKAGE_JSON" ]; then
          PROJECT_DEPENDENCIES=$(jq -r '.dependencies | keys[] | "packages/" + "'$PROJECT'" + "/node_modules/" + .' $PACKAGE_JSON | paste -sd "," -)
        else
          echo "Warning: package.json not found for project $PROJECT. Skipping dependencies."
          PROJECT_DEPENDENCIES=""
        fi
     
       # Scan project
        set -e

        sonar-scanner \
          -Dsonar.sources=packages/generic/$PROJECT \
          -Dsonar.host.url=$SONAR_URL \
          -Dsonar.projectKey=$PROJECT_KEY \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.name=$PROJECT \
          -Dsonar.branch.name=$CI_COMMIT_BRANCH \
          -Dsonar.exclusions="packages/backend/node_modules/@label/core/**" \
          -Dsonar.javascript.lcov.reportPaths=$PROJECT_COVERAGE_PATH
        set +e

      done
  rules:
    - if: '$CI_COMMIT_TAG == null'

docker:backend:
  image: docker:20.10.22
  stage: docker
  services:
    - docker:20.10.22-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTPS_PROXY
      --target label-backend
      -f Dockerfile-open.label-backend
      -t $DOCKER_BACKEND_IMAGE .
    - docker tag $DOCKER_BACKEND_IMAGE $DOCKER_BACKEND_TAG_BRANCH
    - docker push $DOCKER_BACKEND_IMAGE
    - docker push $DOCKER_BACKEND_TAG_BRANCH
  only:
    - develop-open
    - recette
    - develop-ci
    - casslab-57
    - label-rec1

docker:client:
  image: docker:19.03.5
  stage: docker
  services:
    - docker:18-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build
      --target label-client
      -f Dockerfile-open.label-client
      -t $DOCKER_CLIENT_IMAGE .
    - docker tag $DOCKER_CLIENT_IMAGE $DOCKER_CLIENT_TAG_BRANCH
    - docker push $DOCKER_CLIENT_IMAGE
    - docker push $DOCKER_CLIENT_TAG_BRANCH
  only:
    - develop-open
    - recette
    - develop-casslab-57
    - casslab-57
    - label-rec

trivy:backend:
  extends: [".trivy-scan"]
  stage: scan_docker
  variables:
    TRIVY_DOCKER_SCAN: $DOCKER_BACKEND_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"  || $CI_COMMIT_BRANCH == "develop-casslab-57"

trivy:client:
  extends: [".trivy-scan"]
  stage: scan_docker
  variables:
    TRIVY_DOCKER_SCAN: $DOCKER_CLIENT_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"  || $CI_COMMIT_BRANCH == "develop-casslab-57"
    
deploy:iaas:
  stage: deploy
  tags:
    - iaas
  script:
    - |
    - echo " ****************** DEPLOY *************************** "
  only:
    - develop-open
    - recette
    - develop-casslab-57
